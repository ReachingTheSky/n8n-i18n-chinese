ARG NODE_VERSION=20

# 1. 构建阶段
FROM --platform=linux/amd64 n8nio/base:${NODE_VERSION} AS builder

WORKDIR /src
COPY . /src

# 设置构建环境变量
ENV DOCKER_BUILD=true
ENV N8N_ENTERPRISE_MOCK=true
ENV N8N_DEFAULT_LOCALE=zh-CN

# 安装依赖并构建
RUN --mount=type=cache,id=pnpm-store,target=/root/.local/share/pnpm/store \
    --mount=type=cache,id=pnpm-metadata,target=/root/.cache/pnpm/metadata \
    pnpm install --frozen-lockfile

RUN pnpm build

# 部署到 /compiled
RUN mkdir /compiled
RUN NODE_ENV=production DOCKER_BUILD=true \
    pnpm --filter=n8n --prod --legacy deploy /compiled

# 2. 运行阶段
FROM n8nio/base:${NODE_VERSION}
ENV NODE_ENV=production
ENV NPM_CONFIG_IGNORE_SCRIPTS=true

# 构建参数
ARG N8N_VERSION=1.99.1
ARG BUILD_DATE
ARG ENTERPRISE_MOCK=true

# 设置版本和环境变量
ENV N8N_RELEASE_TYPE=stable
ENV N8N_VERSION=${N8N_VERSION}

# 企业版模拟和中文环境
ENV N8N_ENTERPRISE_MOCK=${ENTERPRISE_MOCK}
ENV N8N_DEFAULT_LOCALE=zh-CN
ENV N8N_LICENSE_SERVER_URL=
ENV N8N_LICENSE_AUTO_RENEW_ENABLED=false

# 标签信息
LABEL org.opencontainers.image.title="n8n-integrated"
LABEL org.opencontainers.image.description="N8N with Enterprise Mock & Chinese i18n"
LABEL org.opencontainers.image.version=${N8N_VERSION}
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.source="https://github.com/n8n-io/n8n"
LABEL org.opencontainers.image.licenses="SEE LICENSE IN LICENSE.md"

# 设置工作目录和用户
WORKDIR /home/node
COPY --from=builder /compiled /usr/local/lib/node_modules/n8n
COPY docker-entrypoint.sh /

# 安装和配置
RUN \
  cd /usr/local/lib/node_modules/n8n && \
  npm rebuild && npm cache clean --force && \
  rm -rf /tmp/* && \
  ln -s /usr/local/lib/node_modules/n8n/bin/n8n /usr/local/bin/n8n && \
  chmod +x /docker-entrypoint.sh

USER node
EXPOSE 5678/tcp

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD wget --quiet --tries=1 --spider http://localhost:5678/healthz || exit 1

ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"] 